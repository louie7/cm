"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible 

set history=4500 

" Plugins managed by Vundle setting begin
if expand($USER) == "yilu" && (v:version >= 704)
    filetype off                  " required
    
    " set the runtime path to include Vundle and initialize
    set rtp+=/u/yilu/.vim/bundle/Vundle.vim
    call vundle#begin()
    
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')
    
    " let Vundle manage Vundle, required
    Plugin 'VundleVim/Vundle.vim'
    
    Plugin 'vim-scripts/indentpython.vim'
    Plugin 'tmhedberg/SimpylFold'
    Plugin 'davidhalter/jedi-vim'
    " Plugin 'scrooloose/syntastic'
    " Plugin 'nvie/vim-flake8'
    " Plugin 'cburroughs/pep8'
    
    " enable python Tab-complete Python code
    Plugin 'rkulla/pydiction.git' 
    " Bundle 'Valloric/YouCompleteMe'
    
    " Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
    
    
    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    " filetype plugin indent on    " required
    " Vundle setting end
endif

" Enable file type detection.
filetype plugin on
" filetype indent on 

set autoread 

" set mouse=a 

"set mapleader used by '<leader>' in other map
let mapleader = ","
let g:mapleader = ","

" Fast saving: nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
map <leader>er :e /u/yilu/.vimrc<cr>

" Fast reloading of the .vimrc
map <leader>lr :source /u/yilu/.vimrc<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vim Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Turn on Wild menu
set wildmenu 

"set cmdheight=2

"Do not redraw, when running macros.. lazyredraw
set lz 

"Bbackspace and cursor keys wrap to
"set whichwrap+=<,>,h,l 

"allow backspacing over everything in insert mode
set backspace=eol,start,indent

"Set magic on, for Regex
set magic 

"Highlight search things
set hlsearch 

"do incremental searching
set incsearch    

" ignore case when searching, use \Cpattern to search the word with case care
set ignorecase smartcase

set noerrorbells
set vb t_vb=

set ruler    "show the cursor position all the time
set showcmd    "display incomplete commands

if has("vms")
  set nobackup  " do not keep a backup file, use versions instead
else
  set backup    " keep a backup file in specific directory
  set backupdir=/u/yilu/.bak_vim,/tmp,.
endif

" Don't use Ex mode, use Q for formatting
" map Q gq

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " autocmd group 
  augroup vimrcEx
    autocmd!

    autocmd BufEnter * call CHANGE_CURR_DIR()

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Off Jedi
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \   if &filetype != 'python' |
    \     let g:jedi#auto_initialization = 0 |
    \   endif |
    \ endif

    " For all text files set 'textwidth' to 78 characters.
    " autocmd FileType text setlocal textwidth=78
    autocmd FileType python :call InitPython() 
  augroup END
endif " has("autocmd")


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" always uses spaces instead of tab characters
set expandtab
" make 'tab' insert indents instead of tabs at the beginning of a line
set smarttab
" size of an 'indent'
set shiftwidth=4

" size of a hard tabstop
set tabstop=4
set softtabstop=4

" map <leader>t2 :setlocal shiftwidth=2<cr> " map <leader>t4 :setlocal shiftwidth=4<cr>

" In insert mode, to erase previously entered characters
set backspace=2

" line break 
set textwidth=0
set linebreak

"Wrap lines
set wrap 

" prevent Vim from automatically insert line breaks in newly entered text
set wrapmargin=0

" Maximum width of text that is being inserted
" set tw=500

"always set autoindenting on
set ai 

"Smart indent
set si 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,sc will toggle and untoggle spell checking
map <leader>sc :setlocal spell!<cr>

"Shortcuts using <leader>
"]s move to next misspelled word after the cursor
"z= For the word under/after the cursor suggest correctly spelled words.
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => status line setting
""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2 

"set statusline=%<%f%<%{FileTime()}%<%h%m%r%=%-20.(line=%03l,col=%02c%V,totlin=%L%)\%h%m%r%=%-30(,BfNm=%n%Y%)\%P\*%=%{CurTime()}
"set rulerformat=%15(%c%V\ %p%%%)
"set statusline=[T=%Y]\ %<%F%m%r%h\ \ %=%-7.(line=%l,col=%c%V,SumL=%L%)\%=%-7(,BfN=%n%) "\ %<%{CurTime()}
"set statusline=%F%m%r%h%w\ [FMT=%{&ff}]\ [POS=%l,%v][%p%%]\ [STL=%Y]\ [%{strftime(\"%m/%d\ %H:%M\")}]
set statusline=%F%m%r%h%w\ \ [F=%{&ff}]\ [S=%Y]\ [L=%l,%v][%p%%]
"the current work time \ %{strftime(\"%m/%d/%y\ \%H:%M\")}

"fu! FileTime()
"        let ext=tolower(expand("%:e"))
"        let fname=tolower(expand('%<'))
"        let filename=fname . '.' . ext
"        let msg=""
"        let msg=msg." ".strftime("(MT %m/%d/%y %H:%M)",getftime(filename))
"        return msg
"endf

"fu! CurTime()
"        let ftime=""
"        let ftime=ftime." ".strftime("%b,%d %y %H:%M:%S")
"        return ftime
"endf

"function! CurDir()
"  let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
"  return curdir
"endfunction


"****************************************************************"
""" individual setting here, luyi--45 (:
"****************************************************************"
" set color scheme 
" set bg=dark
" nmap <leader>cs :colorscheme solarized<cr>
if file_readable(expand("\~/.vim/colors/solarized.vim"))
    colorscheme solarized
elseif file_readable(expand("\~/.vim/colors/iDesert.vim"))
    colorscheme iDesert
else
    colorscheme desert
endif

"set font 
"set guifont=Courier_New:h11:cANSI

"syntax hightlight
syntax enable 

"set line number
set nu

" show parenthesis mark match 
set showmatch
set matchtime=1

""" use 'set all' to show all the setting

" setting for 'Tlist' 
let Tlist_Ctags_Cmd='~yilu/.vim/ctags-5.8/ctags'
let Tlist_Show_One_File=1 
let Tlist_Exit_OnlyWindow=1 
let Tlist_Use_Right_Window=1

"set foldcolumn=4

" set the menu & the message to English
set langmenu=en_US
let $LANG = 'en_US'

" source $VIMRUNTIME/delmenu.vim
" source $VIMRUNTIME/menu.vim

" winmanager set
let g:winManagerWindowLayout='TagList|FileExplorer' 
nmap wm :WMToggle<cr> 

"Always set your working directory to the file you're editing
function! CHANGE_CURR_DIR()
  let _dir = expand("%:p:h")
  exec "cd " . _dir
  unlet _dir
endfunction

"map a key to ':noh' to control-n that turn off 'hlsearch'
nmap <leader>nh :noh<cr>
"nmap <silent> <C-N> :silent noh<CR>

"****************************************************************"
" 1. Reverse Selected Text-- visually select the word or words, and hit ';rv'
vnoremap ;rv c<C-O>:set revins<cr><C-R>"<esc>:set norevins<cr>


"****************************************************************"
" 2. visual searching
" use // to search the select string by visual;  vnoremap // y/<C-R>"<CR>
vnoremap // y/<C-R>=escape(@",'\\/.*^~[]')<CR><CR>


"****************************************************************"
" 3. Switching to a different file is made easier using a simple map:
:map <F12> :buffers<CR>:e #


"****************************************************************"
" 4. hit F5 to compile and run the current file or F8 to compile or step through the code 
map <F5> :call CompileRunGcc()<CR>
map <F8> :call CompileGcc()<CR>

func! CompileRunGcc()
    "Save the file
    exec "w"  
    exec "!gcc % -o %< && cr 10 && IF EXIST %<.exe (%<) ELSE banner -c = Compile Unsuccessful "  
    "jump back where we were
    exec "i"
endfunc

func! CompileGcc()
    exec "w"
    exec "!gcc % -o %<  && IF EXIST %<.exe (cr 5 && banner -c # Success) ELSE banner -c # Compile Unsuccessful "
    exec "i"
endfunc


"****************************************************************"
" 5. add a function heading and position your cursor just after Description so that one can document as one proceeds with code.
function GenFileHeading()
  let s:line=line(".")
  call setline(s:line,"#############################################################################")
  call append(s:line,"# Script: ")
  call append(s:line+1,"# Description:  ")
  call append(s:line+2,"# Author:       Lu Yi")
  call append(s:line+3,"# Date:         ".strftime("%b %d %Y"))
  call append(s:line+4,"#############################################################################")
  unlet s:line
endfunction

imap <F7>  <esc>mz:execute FileHeading()<RET>`zjA


"****************************************************************"
" 6. make vim search tags file at the current dir.
" if there is no such file, find it recursively from top.
set tags=tags;
" set autochdir


"****************************************************************"
" 7. show chinese char well
" let &termencoding = &encoding
" set encoding=utf-8
" set fileencoding=utf-8
" set fileencodings=ucs-bom,utf-8,gb18030,cp936
" 


"****************************************************************"
" 8. show Whitespace characters (tabs, spaces, etc) at end of line 
" highlight WhitespaceEOL ctermbg=yellow guibg=yellow
" match WhitespaceEOL /\s\+$/


"****************************************************************"
" 9. show special characters (:h list), Same as :print, but display unprintable characters with '^' and put $ after the line.
" show the no printable chars
" set listchars=tab:>-,trail:.,extends:>,precedes:<
set listchars=tab:>-,eol:<,nbsp:%
nmap <leader>sl :set list<cr>
nmap <leader>nl :set nolist<cr>

"****************************************************************"
" 10. Python setting
function InitPython()
  setlocal omnifunc=pythoncomplete#Complete
  "setlocal completeopt-=preview " disable docstring window to popup during completion
  setlocal foldmethod=indent foldlevel=70
  let g:pydiction_location = '/remote/us01home27/yilu/iStage/Configs/.vim/bundle/pydiction/complete-dict' 
  let g:pydiction_menu_height = 7 
endfunction

""""set diffexpr=MyDiff()
""""function MyDiff()
""""  let opt = '-a --binary '
""""  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
""""  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
""""  let arg1 = v:fname_in
""""  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
""""  let arg2 = v:fname_new
""""  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
""""  let arg3 = v:fname_out
""""  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
""""  let eq = ''
""""  if $VIMRUNTIME =~ ' '
""""    if &sh =~ '\<cmd'
""""      let cmd = '""' . $VIMRUNTIME . '\diff"'
""""      let eq = '"'
""""    else
""""      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
""""    endif
""""  else
""""    let cmd = $VIMRUNTIME . '\diff'
""""  endif
""""  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
""""endfunction
""""

"set t_Co=256;

